Note: description generated by ChatGPT.
Code examples handwritten, if provided.

# ============================================================
# Class: GenericFPN
# ============================================================
# A highly configurable Feature Pyramid Network (FPN) module that supports
# multiple fusion strategies, dynamic channel widths, and optional extra pyramid levels.
#
# Args:
#   in_channels (Sequence[int]):
#       List of input feature map channel counts (from shallow to deep).
#   out_channels (int | Sequence[int], optional):
#       Output channel count(s) for each level.
#       If None, defaults to same as in_channels.
#   fuse_type (str):
#       Fusion strategy for top-down feature aggregation:
#         - "sum": elementwise addition (requires matching widths or uses projection)
#         - "concat": concatenation followed by reduction block
#         - "csp": concatenation followed by a CSP1_X fusion module
#   lateral_factory (Callable[[int, int], nn.Module]):
#       Factory for lateral connections (default: 1×1 convolution without activation).
#   reduce_factory (Callable[[int, int], nn.Module]):
#       Factory for post-concat reduction block (used only when fuse_type="concat").
#   smooth (Optional[str]):
#       Type of smoothing applied after fusion. Use "3x3" for a 3×3 conv; None disables smoothing.
#   upsample_mode (str):
#       Upsampling method: "nearest" or "bilinear".
#   align_corners (Optional[bool]):
#       Used only when upsample_mode="bilinear".
#   extra_levels (int):
#       Number of additional pyramid levels to append by strided 3×3 convolution on the last level.
#   extra_conv_channels (int | Sequence[int], optional):
#       Channel counts for extra pyramid levels.
#       If None, uses last out_channels value.
#
# Methods:
#   forward(features: Sequence[torch.Tensor]) -> List[torch.Tensor]:
#       Builds the top-down FPN pathway with lateral, fusion, and optional smoothing layers.
#       Returns a list of processed feature maps from shallow to deep, including extra levels if specified.
#
# Usage:
#   fpn = GenericFPN(in_channels=[256, 512, 1024], out_channels=256, fuse_type="csp")
#   feats = fpn([c3, c4, c5])


# ============================================================
# Class: ClassicFPN
# ============================================================
# Standard Feature Pyramid Network (FPN) implementation from
# Lin et al., 2017 ("Feature Pyramid Networks for Object Detection").
#
# Characteristics:
#   - Lateral connections: 1×1 conv to unified width (default: 256 channels)
#   - Fusion: elementwise addition (top-down pathway)
#   - Optional smoothing: post-fusion 3×3 convolution (enabled by default)
#   - Upsampling: nearest-neighbor (default)
#   - Supports optional extra levels (e.g., P6/P7) using stride-2 3×3 convolutions
#
# Args:
#   in_channels (Sequence[int]):
#       List of input feature map channel counts.
#   out_channels (int | Sequence[int]):
#       Output channel count(s) for each pyramid level (default: 256).
#   smooth (bool):
#       Enables or disables 3×3 smoothing convolution after fusion.
#   upsample_mode (str):
#       Upsampling method ("nearest" or "bilinear").
#   align_corners (Optional[bool]):
#       Used only when upsample_mode="bilinear".
#   extra_levels (int):
#       Number of extra pyramid levels to generate.
#   extra_conv_channels (int | Sequence[int], optional):
#       Channel configuration for extra levels.
#   lateral_factory (Callable[[int, int], nn.Module]):
#       Custom lateral 1×1 convolution factory.
#   reduce_factory (Callable[[int, int], nn.Module]):
#       Custom reduction block factory.
#
# Methods:
#   forward(features: Sequence[torch.Tensor]) -> List[torch.Tensor]:
#       Produces classic top-down FPN feature maps with elementwise summation fusion.
#
# Usage:
#   fpn = ClassicFPN(in_channels=[256, 512, 1024])
#   pyramid_feats = fpn([c3, c4, c5])

# ============================================================
# Class: CspFPN
# ============================================================
# Cross Stage Partial (CSP) variant of the Feature Pyramid Network.
#
# Characteristics:
#   - Fusion via concatenation + CSP1_X block for improved gradient flow
#   - Lateral connections: 1×1 conv without activation
#   - Smoothing: disabled by default (optional "3x3" conv)
#   - Upsampling: bilinear interpolation (default, align_corners=False)
#   - Channel widths: defaults to per-level input widths if not specified
#
# Args:
#   in_channels (Sequence[int]):
#       List of input feature map channel counts.
#   out_channels (int | Sequence[int], optional):
#       Output channel configuration for each level (default: same as input widths).
#   upsample_mode (str):
#       Upsampling method ("bilinear" or "nearest").
#   align_corners (Optional[bool]):
#       Used for bilinear interpolation alignment.
#   smooth (bool):
#       Enables optional 3×3 smoothing convolution.
#   extra_levels (int):
#       Number of extra pyramid levels to create.
#   extra_conv_channels (int | Sequence[int], optional):
#       Channel configuration for extra levels.
#   lateral_factory (Callable[[int, int], nn.Module]):
#       Factory for lateral 1×1 convolution modules.
#
# Methods:
#   forward(features: Sequence[torch.Tensor]) -> List[torch.Tensor]:
#       Builds a CSP-style feature pyramid using concat-based fusion and CSP blocks.
#
# Usage:
#   fpn = CspFPN(in_channels=[128, 256, 512])
#   features = fpn([c3, c4, c5])

